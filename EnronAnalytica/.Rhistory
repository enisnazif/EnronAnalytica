?levels
library(rjson)
library(jsonlite)
library(tm)
library(stringdist)
library(RWeka)
library(xgboost)
train <- fromJSON("train.json")
test <- fromJSON("test.json")
ls
ls()
?ls
ls()
1+!
1+1
require(igraph)
network <- read.table("toInteractions.csv")
getwd()
setwd(/Work/Second_Year/CS261/CS261/)
setwd("/Work/Second_Year/CS261/CS261/")
setwd("Users/Enis/Work/Second_Year/CS261/CS261/")
setwd("Users/Enis/R/App-1")
setwd("Users/Enis/R/App-1/")
setwd("Users/Enis/R/App-1/")
setwd("Users/Enis/R/")
setwd("Users/Enis/)
f
ds
ad
f
as_)":"
getwd()
cw <- c(5,5,10,12,14,16)
exam <- c(38,45,69,65,75,96)
cw
exam
rbind(cw,exam)
rbind(cw,exam)
c
cbind(cw,exam)
?lm
lm(table[1] ~ table[2])
table[1]
table
table
table <- cbind(cw,exam)
lm(table[1] ~ table[2])
plot(table)
mymodel <- lm(table[2] ~ table[1])
mymodel
abline(mymodel)
plot(mymodel)
mymodel <- lm(table[1] ~ table[2])
abline(mymodel)
mymodel
corr(cw,exam)
cor(cw,exam)
lm(exam ~ cw)
abline(lm(exam ~ cw))
abline(lm(cw ~ exam))
lm(cw ~ exam)
abline(lm(cw ~ exam))
plot(cw,exam)
abline(lm(cw ~ exam))
abline(lm(exam ~ cw))
?plot
plot(cw,exam, xlab = "Coursework Mark", ylab = "Exam score")
?plot
lm1
cw <- c(5,5,10,12,14,16)
exam <- c(38,45,69,65,75,96)
plot(cw,exam, xlab = "Coursework Mark", ylab = "Exam score")
lm1 <- lm(exam ~ cw)
lm1
fitted(lm1)
cw <- cw/20
cw
lm2 <- lm(exam ~ cwp)
cwp <- cw/20
lm2 <- lm(exam ~ cwp)
fitted(lm2)
lm2
lm1
abline(cwp)
abline(lm2)
predict(lm1, newdata = list(10))
predict(lm1, newdata = list(cw = 10))
predict(lm1, newdata = list(cw = 20))
predict(lm1, newdata = list(exam = 40))
#plots linear regression line
abline(lm1)
predict(lm1, exam = 40
predict(lm1, exam = 40)
predict(lm1, cw = 40)
predict(lm1, newdata = list(cw = 20))
predict(lm1, newdata = list(exam = 20))
predict(lm1, newdata = list(cw = 4))
predict(lm1, newdata = list(cw = 5))
lm1
getwd()
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv <- read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv[haemoglobin$gender == male]
haemoglobin.csv[haemoglobin.csv$gender == male]
haemoglobin.csv[haemoglobin.csv$gender == "Male"]
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
haemoglobin.csv[haemoglobin.csv$gender == "Male",]$gender
haemoglobin.csv[haemoglobin.csv$gender == "Male",]$gender <- 1
haemoglobin.csv[haemoglobin.csv$gender == "Male",] <- 1
haemoglobin.csv[1]
haemoglobin.csv[2]
haemoglobin.csv[3]
haemoglobin.csv[4]
haemoglobin.csv
haemoglobin.csv[haemoglobin.csv$gender == "Male",] <- 1
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv[haemoglobin.csv$gender == "Male",] <- 1
haemoglobin.csv
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
male <- haemoglobin.csv[haemoglobin.csv$gender == "Male",] <- 1
male
haemoglobin.csv$male <- haemoglobin.csv[haemoglobin.csv$gender == "Male",]
male <- haemoglobin.csv[haemoglobin.csv$gender == "Male",]
male
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv[haemoglobin.csv$gender == "Male"]
haemoglobin.csv[,haemoglobin.csv$gender == "Male"]
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv <- read.csv("/Users/Enis/Desktop/haemoglobin.csv")
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
haemoglobin.csv[haemoglobin.csv$gender == "Male",]
male <- haemoglobin.csv[haemoglobin.csv$gender == "Male",]
female <- haemoglobin.csv[haemoglobin.csv$gender == "Female",]
haemoglobin.csv
female <- haemoglobin.csv[haemoglobin.csv$gender == "Female",]
View(female)
female <- haemoglobin.csv$gender == "Female",]
female <- haemoglobin.csv$gender == "Female"
female <- 1*(haemoglobin.csv$gender == "Female")
female <- 1*(haemoglobin.csv$gender == "Male")
male <- 1*(haemoglobin.csv$gender == "Male")
male
rm(male,female)
ones <- c(rep(1,10))
ones
View(haemoglobin.csv)
ones <- rep(1,10)
weights <- haemoglobin.csv$weight
gamma <- rep(2,10)*male
designMatrix <- cbind(ones,weights,gamma)
designMatrix
ones <- rep(1,10)
weights <- haemoglobin.csv$weight
gamma <- rep(1,10)*male
male <- 1*(haemoglobin.csv$gender == "Male")
ones <- rep(1,10)
weights <- haemoglobin.csv$weight
gamma <- rep(1,10)*male
designMatrix
ones <- rep(1,10)
weights <- haemoglobin.csv$weight
gamma <- rep(1,10)*male
designMatrix
ones <- rep(1,10)
weights <- haemoglobin.csv$weight
gamma <- male
designMatrix <- cbind(ones,weights,gamma)
alphaCoefficients <- rep(1,10)
weights <- haemoglobin.csv$weight
gammaCoefficients <- male
designMatrix <- cbind(alphaCoefficients,weights,gammaCoefficients)
haemoglobin.csv
lm(haemoglobin.csv$haemoglobin ~ haemoglobin.csv$weight + male)
plot(haemoglobin.csv)
cw <- c(5,5,10,12,14,16)
exam <- c(38,45,69,65,75,96)
plot(cw,exam, xlab = "Coursework Mark", ylab = "Exam score")
#generates linear model
lm1 <- lm(exam ~ cw)
#gets fitted values
lm1.fittedValues <- fitted(lm1)
#plots linear regression line
abline(lm1)
#cw marks as percentage
cwp <- cw/20
#prediction of exam mark (using lm1) for a student who scored 10 on coursework
predict(lm1, newdata = list(cw = 10))
#prediction of exam mark (using lm1) for a student who scored 20/20 on coursework. This returns 107.0348 which
#is clearly not possible as the maximum mark is 100. This has happened because we are extrapolating
predict(lm1, newdata = list(cw = 20))
#a coursework mark of 5 predicts an exam score of 41.29114
predict(lm1, newdata = list(cw = 5))
#read the haemoglobin.csv file
haemoglobin.csv <- read.csv("/Users/Enis/Desktop/haemoglobin.csv")
#create the male variable, which is 1 for all males and 0 for all females
male <- 1*(haemoglobin.csv$gender == "Male")
#create and store the design matrix
alphaCoefficients <- rep(1,10)
weights <- haemoglobin.csv$weight
gammaCoefficients <- male
designMatrix <- cbind(alphaCoefficients,weights,gammaCoefficients)
#create the haemoglobin linear model
lm3 <- lm(haemoglobin.csv$haemoglobin ~ haemoglobin.csv$weight + male)
lm(haemoglobin.csv$haemoglobin ~ haemoglobin.csv$weight + male)
attach(haemoglobin.csv)
weight
plot(haemoglobin,weight)
abline(lm3)
fitted(lm3)
abline(lm3[2])
abline(lm3[3])
abline(lm3[1])
lm3
fitted(lm3)
plot(weight,haemoglobin)
fitted(lm3)
abline(lm3)
lm3
mean(fitted(lm3)[1:5])
mean(fitted(lm3)[1:5]) - mean(fitted(lm3)[6:1-])
mean(fitted(lm3)[1:5]) - mean(fitted(lm3)[6:10])
shiny::runApp('work/Second_Year/CS261/CS261/EnronAnalytica')
shiny::runApp('work/Second_Year/CS261/CS261/EnronAnalytica')
